/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.itsJmPaunlagui.testflight;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;

/**
 *
 * @author its-JmPaunlagui
 */
public class TestFlight extends javax.swing.JFrame {

    /**
     * Creates new form TestFlight
     */
    public TestFlight() {
        initComponents();

        // Icon
        setIcon();

        // Title
        this.setTitle("FLIGHT SCHEDULER");

        // Custom font for message dialog
        UIManager.put("OptionPane.messageFont", new Font("Century Gothic", Font.PLAIN, 36));
    }

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("flight.png")));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDestination = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblArrivalTime = new javax.swing.JLabel();
        btnFlightScheduleInformation = new javax.swing.JButton();
        lblDateOfFlight = new javax.swing.JLabel();
        lblDepartureTime = new javax.swing.JLabel();
        txtAircraftName = new javax.swing.JTextField();
        txtOrigin = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFlightSchedule = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        txtDestination = new javax.swing.JTextField();
        txtDepartureTime = new javax.swing.JTextField();
        txtArrivalTime = new javax.swing.JTextField();
        txtDateOfFlight = new javax.swing.JTextField();
        btnOrigin = new javax.swing.JButton();
        btnTravelRoute = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblAircraftName = new javax.swing.JLabel();
        btnUpdateSchedule = new javax.swing.JButton();
        lblOrigin = new javax.swing.JLabel();
        btnRemoveSchedule = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDestination.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        lblDestination.setText("Destination");

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        jLabel1.setText("Quick Look");

        lblArrivalTime.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        lblArrivalTime.setText("Arrival Time");

        btnFlightScheduleInformation.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        btnFlightScheduleInformation.setText("Flight Schedule Information");
        btnFlightScheduleInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlightScheduleInformationActionPerformed(evt);
            }
        });

        lblDateOfFlight.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        lblDateOfFlight.setText("Date of Flight");

        lblDepartureTime.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        lblDepartureTime.setText("Departure Time");

        txtAircraftName.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N

        txtOrigin.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N

        tblFlightSchedule.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        tblFlightSchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Aircraft Name", "Origin", "Destination", "Departure Time", "Arrival Time", "Date of Flight"
            }
        )
        // Table is not editable but selectable

        {
            public boolean isCellEditable(int row, int column){
                return false;
            }
        }
    );
    tblFlightSchedule.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
    tblFlightSchedule.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tblFlightScheduleMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(tblFlightSchedule);

    btnSave.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
    btnSave.setText("Save");
    btnSave.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnSaveActionPerformed(evt);
        }
    });

    txtDestination.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N

    txtDepartureTime.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N

    txtArrivalTime.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N

    txtDateOfFlight.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N

    btnOrigin.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
    btnOrigin.setText("Origin");
    btnOrigin.setActionCommand("2 Instance will pass to the constructor");
    btnOrigin.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnOriginActionPerformed(evt);
        }
    });

    btnTravelRoute.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
    btnTravelRoute.setText("Travel Route");
    btnTravelRoute.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnTravelRouteActionPerformed(evt);
        }
    });

    btnClear.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
    btnClear.setText("Clear");
    btnClear.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnClearActionPerformed(evt);
        }
    });

    lblAircraftName.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
    lblAircraftName.setText("Aircraft name");

    btnUpdateSchedule.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
    btnUpdateSchedule.setText("Update Schedule");
    btnUpdateSchedule.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnUpdateScheduleActionPerformed(evt);
        }
    });

    lblOrigin.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
    lblOrigin.setText("Origin");

    btnRemoveSchedule.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
    btnRemoveSchedule.setText("Remove Schedule");
    btnRemoveSchedule.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnRemoveScheduleActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap(32, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblOrigin)
                        .addComponent(lblAircraftName)
                        .addComponent(lblDestination)
                        .addComponent(lblArrivalTime)
                        .addComponent(lblDateOfFlight)
                        .addComponent(lblDepartureTime))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtAircraftName, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtOrigin, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtDestination, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtDepartureTime, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtDateOfFlight)
                        .addComponent(txtArrivalTime, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(btnUpdateSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(btnRemoveSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnFlightScheduleInformation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnTravelRoute, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGap(24, 24, 24)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 911, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(32, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap(32, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jScrollPane1)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblAircraftName)
                        .addComponent(txtAircraftName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblOrigin)
                        .addComponent(txtOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDestination)
                        .addComponent(txtDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDepartureTime)
                        .addComponent(txtDepartureTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblArrivalTime)
                        .addComponent(txtArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDateOfFlight)
                        .addComponent(txtDateOfFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSave)
                        .addComponent(btnUpdateSchedule))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnClear)
                        .addComponent(btnRemoveSchedule))
                    .addGap(32, 32, 32)
                    .addComponent(jLabel1)
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnOrigin)
                        .addComponent(btnTravelRoute))
                    .addGap(18, 18, 18)
                    .addComponent(btnFlightScheduleInformation)))
            .addContainerGap(32, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    //Image icon for the message dialog.
    private final ImageIcon flightscheduleIcon = new ImageIcon(getClass().getResource("flightschedule.png"));
    private final ImageIcon warningIcon = new ImageIcon(getClass().getResource("warning.png"));
    private final ImageIcon verifiedIcon = new ImageIcon(getClass().getResource("verified.png"));
    private final ImageIcon updatedIcon = new ImageIcon(getClass().getResource("updated.png"));
    private final ImageIcon updateIcon = new ImageIcon(getClass().getResource("update.png"));
    private final ImageIcon removeIcon = new ImageIcon(getClass().getResource("remove.png"));

    // An object of class FlightSchedule
    private final FlightSchedule flightSchedule = new FlightSchedule();

    // Checks the input fields and returns true if its not empty, otherwise it will return false.
    public boolean isDataEntered() {
        while (rootPaneCheckingEnabled) {
            return !(txtAircraftName.getText().isEmpty() || txtOrigin.getText().isEmpty()
                    || txtDestination.getText().isEmpty() || txtDepartureTime.getText().isEmpty()
                    || txtArrivalTime.getText().isEmpty() || txtDateOfFlight.getText().isEmpty());
        }
        return false;
    }

    // 0 for clear   2 for update   4 for warning
    // 1 for save    3 for remove
    private static final int[] switchNum = {
            0, 1, 2, 3, 4
    };
    // An array of "types" for clearing, To set the message dialog correctly that clears the fields.
    private static final String[] types = {
            "clear", "save", "updated", "remove", "warning"
    };

    // Clears the input fields + the type of message.
    private void TypeOfMesseage(String Type) {

        // Pointer for the types that selects which type of message should be.
        int index = 0;

        // In this loop
        // type - each item of array is assigned to this variable.
        // types - array of the type of message.
        for (String type : types) {

            // In the first iteration "type" will be "clear"
            // In the second iteration "type" will be "save", but it depends on what button you click.
            if (Type.equals(type)) {

                // Clears the fields
                txtAircraftName.setText("");
                txtOrigin.setText("");
                txtDestination.setText("");
                txtDepartureTime.setText("");
                txtArrivalTime.setText("");
                txtDateOfFlight.setText("");

                // Messages that will show within the corresponding types and what the index is pointed at switchNum
                switch (switchNum[index]) {
                    case 0:
                        JOptionPane.showMessageDialog(
                                this, "Input Cleared!", "Successfully Cleared!",
                                JOptionPane.INFORMATION_MESSAGE, verifiedIcon
                        );
                        break;
                    case 1:
                        JOptionPane.showMessageDialog(
                                this, "Schedule Added!", "Successfully Added!",
                                JOptionPane.INFORMATION_MESSAGE, verifiedIcon
                        );
                        break;
                    case 2:
                        JOptionPane.showMessageDialog(
                                this, "Schedule Updated!", "Successfully Updated!",
                                JOptionPane.INFORMATION_MESSAGE, updatedIcon
                        );
                        break;
                    case 3:
                        JOptionPane.showMessageDialog(
                                this, "Schedule Removed!", "Successfully Removed!",
                                JOptionPane.INFORMATION_MESSAGE, removeIcon
                        );
                        break;
                    case 4:
                        JOptionPane.showMessageDialog(
                                this, "All fields required!", "Warning!",
                                JOptionPane.WARNING_MESSAGE, warningIcon
                        );
                        break;
                    case 5:

                        break;
                }
            }
            // Navigates the switchNum of the type of message.
            index++;
        }
    }

    private int confirm;

    // Selected row that fill fields
    private void tblFlightScheduleMouseClicked(java.awt.event.MouseEvent evt) {

        // Returns the index of the first selected row, -1 if no row is selected.
        int index = tblFlightSchedule.getSelectedRow();

        // Uses a Vector of Vectors to store the cell value objects.
        // Returns the TableModel that provides the data displayed by this JTable.
        DefaultTableModel dtmFlightSchedules = (DefaultTableModel) tblFlightSchedule.getModel();

        if (evt.getClickCount() == 2) {
            // Prompts to Customize or Update the Schedule
            confirm = JOptionPane.showConfirmDialog(
                    this, "Customize or Update the Schedule?", "Customize or Update Schedule",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, updateIcon
            );

            // If yes
            if (confirm == JOptionPane.YES_NO_OPTION) {

                // Returns a cell value at row and column that fills up the fields.
                // index - the row whose value is to be queried.
                // column - the column whose value is to be queried.
                txtAircraftName.setText(dtmFlightSchedules.getValueAt(index, 0).toString());
                txtOrigin.setText(dtmFlightSchedules.getValueAt(index, 1).toString());
                txtDestination.setText(dtmFlightSchedules.getValueAt(index, 2).toString());
                txtDepartureTime.setText(dtmFlightSchedules.getValueAt(index, 3).toString());
                txtArrivalTime.setText(dtmFlightSchedules.getValueAt(index, 4).toString());
                txtDateOfFlight.setText(dtmFlightSchedules.getValueAt(index, 5).toString());
            } else {
                // If No
                return;
            }
        }
    }

    // Saves the schedule
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {

        // Uses a Vector of Vectors to store the cell value objects.
        // Returns the TableModel that provides the data displayed by this JTable.
        DefaultTableModel dtmFlightSchedule = (DefaultTableModel) tblFlightSchedule.getModel();

        // Checks the fields if its empty it returns false, otherwise return true
        if (!isDataEntered()) {
            String Type = "warning";
            TypeOfMesseage(Type);
        } else {

            // An array of object.
            String[] data = {
                    flightSchedule.setAircraftName(txtAircraftName.getText()),
                    flightSchedule.setOrigin(txtOrigin.getText()),
                    flightSchedule.setDestination(txtDestination.getText()),
                    flightSchedule.setDepartureTime(txtDepartureTime.getText()),
                    flightSchedule.setArrivalTime(txtArrivalTime.getText()),
                    flightSchedule.setDateOfFlight(txtDateOfFlight.getText())
            };

            // Adds a new row of data to a Table object.
            dtmFlightSchedule.addRow(data);

            // for clearing the fields
            String Type = "save";
            TypeOfMesseage(Type);
        }
    }

    // Updates the schedule
    private void btnUpdateScheduleActionPerformed(java.awt.event.ActionEvent evt) {

        // Returns the index of the first selected row, -1 if no row is selected.
        int index = tblFlightSchedule.getSelectedRow();

        // Uses a Vector of Vectors to store the cell value objects.
        // Returns the TableModel that provides the data displayed by this JTable.
        DefaultTableModel dtmFlightSchedule = (DefaultTableModel) tblFlightSchedule.getModel();

        // Checks the fields if its empty it returns false, otherwise return true
        if (!isDataEntered()) {
            JOptionPane.showMessageDialog(
                    this, "Select a schedule to update! ", "Warning!",
                    JOptionPane.WARNING_MESSAGE, warningIcon
            );
        } else {

            // Cursor
            if (tblFlightSchedule.getSelectedRowCount() == 1) {

                // Sets the value in the cell at columnIndex and rowIndex to aValue.
                // flightSchedule.*(*.getText()) - the new value
                // index - the row of the cell to be changed
                // column - the column of the cell to be changed
                dtmFlightSchedule.setValueAt(flightSchedule.setAircraftName(txtAircraftName.getText()), index, 0);
                dtmFlightSchedule.setValueAt(flightSchedule.setOrigin(txtOrigin.getText()), index, 1);
                dtmFlightSchedule.setValueAt(flightSchedule.setDestination(txtDestination.getText()), index, 2);
                dtmFlightSchedule.setValueAt(flightSchedule.setDepartureTime(txtDepartureTime.getText()), index, 3);
                dtmFlightSchedule.setValueAt(flightSchedule.setArrivalTime(txtArrivalTime.getText()), index, 4);
                dtmFlightSchedule.setValueAt(flightSchedule.setDateOfFlight(txtDateOfFlight.getText()), index, 5);

                // Message dialog for update
                String Type = "updated";
                TypeOfMesseage(Type);
            } else {
                // If the update doesn't work show this
                JOptionPane.showMessageDialog(
                        this, "Update failed", "Warning!",
                        JOptionPane.WARNING_MESSAGE, warningIcon
                );
            }
        }
    }

    // Removes the schedule
    private void btnRemoveScheduleActionPerformed(java.awt.event.ActionEvent evt) {

        // Uses a Vector of Vectors to store the cell value objects.
        // Returns the TableModel that provides the data displayed by this JTable.
        DefaultTableModel flightSchedule = (DefaultTableModel) tblFlightSchedule.getModel();
        if (tblFlightSchedule.getSelectedRowCount() == 1) {

            // Removes the row at row from the model.
            flightSchedule.removeRow(tblFlightSchedule.getSelectedRow());
            String Type = "remove";
            TypeOfMesseage(Type);
        } else {
            // Shows if none of the rows is selected.
            JOptionPane.showMessageDialog(
                    this, "Please select to remove the schedule!", "Warning!",
                    JOptionPane.WARNING_MESSAGE, warningIcon
            );
        }
    }

    // Clears the input fields
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {
        String Type = "clear";
        TypeOfMesseage(Type);
    }

    // Quick Look for Aircraft name and origin
    private void btnOriginActionPerformed(java.awt.event.ActionEvent evt) {

        // Returns the index of the first selected row, -1 if no row is selected.
        int index = tblFlightSchedule.getSelectedRow();

        // Uses a Vector of Vectors to store the cell value objects.
        // Returns the TableModel that provides the data displayed by this JTable.
        DefaultTableModel dtmFlightSchedule = (DefaultTableModel) tblFlightSchedule.getModel();

        // Cursor
        if (tblFlightSchedule.getSelectedRowCount() == 1) {
            JOptionPane.showMessageDialog(
                    this, "Aircraft Name: " + flightSchedule.getAircraftName(dtmFlightSchedule.getValueAt(index, 0)) + "\n"
                            + "Origin: " + flightSchedule.getOrigin(dtmFlightSchedule.getValueAt(index, 1)),
                    "Flight Schedule Origin: " + flightSchedule.getOrigin(dtmFlightSchedule.getValueAt(index, 1)), JOptionPane.INFORMATION_MESSAGE,
                    flightscheduleIcon
            );
        } else {
            // Shows if none of the rows is selected.
            JOptionPane.showMessageDialog(
                    this, "Please select a schedule to Quick Look!", "Warning!",
                    JOptionPane.WARNING_MESSAGE, warningIcon
            );
        }


    }

    // Quick Look for Aircraft name, origin and Destination
    private void btnTravelRouteActionPerformed(java.awt.event.ActionEvent evt) {

        // Returns the index of the first selected row, -1 if no row is selected.
        int index = tblFlightSchedule.getSelectedRow();

        // Uses a Vector of Vectors to store the cell value objects.
        // Returns the TableModel that provides the data displayed by this JTable.
        DefaultTableModel dtmFlightSchedule = (DefaultTableModel) tblFlightSchedule.getModel();

        // Cursor
        if (tblFlightSchedule.getSelectedRowCount() == 1) {
            JOptionPane.showMessageDialog(
                    this, "Aircraft Name: " + flightSchedule.getAircraftName(dtmFlightSchedule.getValueAt(index, 0)) + "\n"
                            + "Origin: " + flightSchedule.getOrigin(dtmFlightSchedule.getValueAt(index, 1)) + "\n"
                            + "Destination: " + flightSchedule.getDestination(dtmFlightSchedule.getValueAt(index, 2)),
                    "Flight Schedule Route - " + "From: " + flightSchedule.getOrigin(dtmFlightSchedule.getValueAt(index, 1))
                            + "  To: " + flightSchedule.getDestination(dtmFlightSchedule.getValueAt(index, 2)), JOptionPane.INFORMATION_MESSAGE,
                    flightscheduleIcon
            );
        } else {
            // Shows if none of the rows is selected.
            JOptionPane.showMessageDialog(
                    this, "Please select a schedule to Quick Look!", "Warning!",
                    JOptionPane.WARNING_MESSAGE, warningIcon
            );
        }

    }

    // Details
    private void btnFlightScheduleInformationActionPerformed(java.awt.event.ActionEvent evt) {
        // Returns the index of the first selected row, -1 if no row is selected.
        int index = tblFlightSchedule.getSelectedRow();

        // Uses a Vector of Vectors to store the cell value objects.
        // Returns the TableModel that provides the data displayed by this JTable.
        DefaultTableModel dtmFlightSchedule = (DefaultTableModel) tblFlightSchedule.getModel();

        // Cursor
        if (tblFlightSchedule.getSelectedRowCount() == 1) {
            JOptionPane.showMessageDialog(
                    this,
                    "The Aircraft Name was " + flightSchedule.getAircraftName(dtmFlightSchedule.getValueAt(index, 0)) + ". " + "\n" + "\n"
                            + "From " + flightSchedule.getOrigin(dtmFlightSchedule.getValueAt(index, 1)) + ", you will be destined " + "\n"
                            + "to " + flightSchedule.getDestination(dtmFlightSchedule.getValueAt(index, 2)) + "." + "\n" + "\n"
                            + "Your Departure Time is " + flightSchedule.getDepartureTime(dtmFlightSchedule.getValueAt(index, 3)) + "," + "\n"
                            + "then you should Arrive at " + flightSchedule.getArrivalTime(dtmFlightSchedule.getValueAt(index, 4)) + "." + "\n" + "\n"
                            + "Scheduled at " + flightSchedule.getDateOfFlight(dtmFlightSchedule.getValueAt(index, 5)) + "." + "\n"
                    ,
                    "Flight Schedule Details - " + "From: " + flightSchedule.getOrigin(dtmFlightSchedule.getValueAt(index, 1))
                            + "  To: " + flightSchedule.getDestination(dtmFlightSchedule.getValueAt(index, 2)), JOptionPane.INFORMATION_MESSAGE,
                    flightscheduleIcon
            );
        } else {
            // Shows if none of the rows is selected.
            JOptionPane.showMessageDialog(
                    this, "Please select a schedule to get detailed!", "Warning!",
                    JOptionPane.WARNING_MESSAGE, warningIcon
            );
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestFlight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestFlight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestFlight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestFlight.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestFlight().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnFlightScheduleInformation;
    private javax.swing.JButton btnOrigin;
    private javax.swing.JButton btnRemoveSchedule;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnTravelRoute;
    private javax.swing.JButton btnUpdateSchedule;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAircraftName;
    private javax.swing.JLabel lblArrivalTime;
    private javax.swing.JLabel lblDateOfFlight;
    private javax.swing.JLabel lblDepartureTime;
    private javax.swing.JLabel lblDestination;
    private javax.swing.JLabel lblOrigin;
    private javax.swing.JTable tblFlightSchedule;
    public javax.swing.JTextField txtAircraftName;
    private javax.swing.JTextField txtArrivalTime;
    private javax.swing.JTextField txtDateOfFlight;
    private javax.swing.JTextField txtDepartureTime;
    private javax.swing.JTextField txtDestination;
    private javax.swing.JTextField txtOrigin;
    // End of variables declaration//GEN-END:variables
}
