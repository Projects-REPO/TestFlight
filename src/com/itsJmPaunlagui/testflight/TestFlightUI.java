/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.itsJmPaunlagui.testflight;

import java.awt.Font;
import java.awt.Toolkit;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 * @author its-JmPaunlagui
 */
public class TestFlightUI extends javax.swing.JFrame {

    /**
     * Creates new form TestFlightUI
     */
    public TestFlightUI() {
        initComponents();
        setIcon();
        this.setTitle("FLIGHT SCHEDULER");
        UIManager.put("OptionPane.messageFont", new Font("Century Gothic", Font.PLAIN, 36));
        UIManager.put("TableHeader.font", new Font("Century Gothic", Font.PLAIN, 24));
    }

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("flight.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtDestination = new javax.swing.JTextField();
        txtDepartureTime = new javax.swing.JTextField();
        txtArrivalTime = new javax.swing.JTextField();
        txtDateOfFlight = new javax.swing.JTextField();
        btnOrigin = new javax.swing.JButton();
        btnTravelRoute = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblAircraftName = new javax.swing.JLabel();
        lblOrigin = new javax.swing.JLabel();
        lblDestination = new javax.swing.JLabel();
        lblArrivalTime = new javax.swing.JLabel();
        lblDateOfFlight = new javax.swing.JLabel();
        lblDepartureTime = new javax.swing.JLabel();
        txtAircraftName = new javax.swing.JTextField();
        txtOrigin = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblFlightSchedule = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();
        btnUpdateSchedule = new javax.swing.JButton();
        btnRemoveSchedule = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtDestination.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N

        txtDepartureTime.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N

        txtArrivalTime.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N

        txtDateOfFlight.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N

        btnOrigin.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        btnOrigin.setText("Origin");
        btnOrigin.setActionCommand("2 Instance will pass to the constructor");
        btnOrigin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOriginActionPerformed(evt);
            }
        });

        btnTravelRoute.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        btnTravelRoute.setText("Travel Route");
        btnTravelRoute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTravelRouteActionPerformed(evt);
            }
        });

        btnClear.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblAircraftName.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        lblAircraftName.setText("Aircraft name");

        lblOrigin.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        lblOrigin.setText("Origin");

        lblDestination.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        lblDestination.setText("Destination");

        lblArrivalTime.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        lblArrivalTime.setText("Arrival Time");

        lblDateOfFlight.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        lblDateOfFlight.setText("Date of Flight");

        lblDepartureTime.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        lblDepartureTime.setText("Departure Time");

        txtAircraftName.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N

        txtOrigin.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N

        tblFlightSchedule.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        tblFlightSchedule.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Aircraft Name", "Origin", "Destination", "Departure Time", "Arrival Time", "Date of Flight"
            }
        ));
        tblFlightSchedule.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblFlightSchedule.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblFlightScheduleMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblFlightSchedule);

        btnSave.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdateSchedule.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        btnUpdateSchedule.setText("Update Schedule");
        btnUpdateSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateScheduleActionPerformed(evt);
            }
        });

        btnRemoveSchedule.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        btnRemoveSchedule.setText("Remove Schedule");
        btnRemoveSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveScheduleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblOrigin)
                            .addComponent(lblAircraftName)
                            .addComponent(lblDestination)
                            .addComponent(lblArrivalTime)
                            .addComponent(lblDateOfFlight)
                            .addComponent(lblDepartureTime))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtAircraftName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                            .addComponent(txtOrigin, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDestination, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDepartureTime, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDateOfFlight)
                            .addComponent(txtArrivalTime, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnTravelRoute, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnRemoveSchedule, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 911, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAircraftName)
                            .addComponent(txtAircraftName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblOrigin)
                            .addComponent(txtOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDestination)
                            .addComponent(txtDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDepartureTime)
                            .addComponent(txtDepartureTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblArrivalTime)
                            .addComponent(txtArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDateOfFlight)
                            .addComponent(txtDateOfFlight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave)
                            .addComponent(btnUpdateSchedule))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClear)
                            .addComponent(btnRemoveSchedule))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnOrigin)
                            .addComponent(btnTravelRoute))))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Image icon for the message dialog
    private final ImageIcon flightscheduleIcon = new ImageIcon(getClass().getResource("flightschedule.png"));
    private final ImageIcon warningIcon = new ImageIcon(getClass().getResource("warning.png"));
    private final ImageIcon verifiedIcon = new ImageIcon(getClass().getResource("verified.png"));

    // Checks the input fields and returns true if its not empty, otherwise it will return false
    public boolean isDataEntered() {
        while (rootPaneCheckingEnabled) {
            return !(txtAircraftName.getText().isEmpty() || txtOrigin.getText().isEmpty()
                    || txtDestination.getText().isEmpty() || txtDepartureTime.getText().isEmpty()
                    || txtArrivalTime.getText().isEmpty() || txtDateOfFlight.getText().isEmpty());
        }
        return false;
    }

    // 1 for save
    // 0 for clear
    private static final int[] switchN = {
        0, 1, 2, 3, 4
    };

    // type of clearing to set the message dialog correctly
    private static final String[] types = {
        "clear", "save", "update", "remove", "warning"
    };

    // Clears the input fields
    private void TypeOfMesseage(String Type) {
        int index = 0;
        for (String type : types) {
            if (Type.equals(type)) {
                txtAircraftName.setText("");
                txtOrigin.setText("");
                txtDestination.setText("");
                txtDepartureTime.setText("");
                txtArrivalTime.setText("");
                txtDateOfFlight.setText("");
                switch (switchN[index]) {
                    case 0:
                        JOptionPane.showMessageDialog(
                                this, "Input Cleared!", "Successfully Cleared!",
                                JOptionPane.INFORMATION_MESSAGE, verifiedIcon
                        );
                        break;
                    case 1:
                        JOptionPane.showMessageDialog(
                                this, "Schedule Added!", "Successfully Added!",
                                JOptionPane.INFORMATION_MESSAGE, verifiedIcon
                        );
                        break;
                    case 2:
                        JOptionPane.showMessageDialog(
                                this, "Schedule Updated!", "Successfully Updated!",
                                JOptionPane.INFORMATION_MESSAGE, verifiedIcon
                        );
                        break;
                    case 3:
                        JOptionPane.showMessageDialog(
                                this, "Schedule Removed!", "Successfully Removed!",
                                JOptionPane.INFORMATION_MESSAGE, verifiedIcon
                        );
                        break;
                    case 4:
                        JOptionPane.showMessageDialog(
                                this, "All fields required!", "Warning!",
                                JOptionPane.WARNING_MESSAGE, warningIcon
                        );
                        break;

                }

            }
            index++;// Navigates the switch
        }

    }

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        //An object of class FlightSchedule
        FlightSchedule flightSchedule = new FlightSchedule();

//        flightSchedule.setAircraftName();
//        flightSchedule.setOrigin();
//        flightSchedule.setDestination();
//        flightSchedule.setDepartureTime();
//        flightSchedule.setArrivalTime();
//        flightSchedule.setDateOfFlight();
        if (!isDataEntered()) { // if its empty it returns false, otherwise return true
            String Type = "warning";
            TypeOfMesseage(Type);
        } else {
            String data[] = {
                txtAircraftName.getText(), txtOrigin.getText(),
                txtDestination.getText(), txtDepartureTime.getText(),
                txtArrivalTime.getText(), txtDateOfFlight.getText()
            };

            DefaultTableModel flightSchedules = (DefaultTableModel) tblFlightSchedule.getModel();
            flightSchedules.addRow(data);

            // for clearing the fields
            String Type = "save";
            TypeOfMesseage(Type);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    // Selected row fill fields
    private void tblFlightScheduleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblFlightScheduleMouseClicked

        int index = tblFlightSchedule.getSelectedRow();
        DefaultTableModel dtmFlightSchedules = (DefaultTableModel) tblFlightSchedule.getModel();

        txtAircraftName.setText(dtmFlightSchedules.getValueAt(index, 0).toString());
        txtOrigin.setText(dtmFlightSchedules.getValueAt(index, 1).toString());
        txtDestination.setText(dtmFlightSchedules.getValueAt(index, 2).toString());
        txtDepartureTime.setText(dtmFlightSchedules.getValueAt(index, 3).toString());
        txtArrivalTime.setText(dtmFlightSchedules.getValueAt(index, 4).toString());
        txtDateOfFlight.setText(dtmFlightSchedules.getValueAt(index, 5).toString());

    }//GEN-LAST:event_tblFlightScheduleMouseClicked

    private void btnUpdateScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateScheduleActionPerformed
        int index = tblFlightSchedule.getSelectedRow();

        DefaultTableModel dtmFlightSchedule = (DefaultTableModel) tblFlightSchedule.getModel();

        if (!isDataEntered()) {
            String Type = "warning";
            TypeOfMesseage(Type);
        } else {
            if (tblFlightSchedule.getSelectedRowCount() == 1) {
//                dtmFlightSchedule.setValueAt(txtAircraftName.getText(), index, 0);
//                dtmFlightSchedule.setValueAt(txtOrigin.getText(), index, 1);
//                dtmFlightSchedule.setValueAt(txtDestination.getText(), index, 2);
//                dtmFlightSchedule.setValueAt(txtDepartureTime.getText(), index, 3);
//                dtmFlightSchedule.setValueAt(txtArrivalTime.getText(), index, 4);
//                dtmFlightSchedule.setValueAt(txtDateOfFlight.getText(), index, 5);

                String[] data = {
                    txtAircraftName.getText(),
                    txtOrigin.getText(),
                    txtDestination.getText(),
                    txtDepartureTime.getText(),
                    txtArrivalTime.getText(),
                    txtDateOfFlight.getText()
                };
                Object[] rowData = new Object[dtmFlightSchedule.getRowCount()];

                for (int i = 0; i < tblFlightSchedule.getRowCount(); i++) {

                    String[] row = new String[data[i].length()];
                    rowData[i] = dtmFlightSchedule.setValueAt(i, tblFlightSchedule.getSelectedRow(), i);
                }

                String Type = "update";
                TypeOfMesseage(Type);
            } else {
                JOptionPane.showMessageDialog(
                        this, "Update failed", "Warning!",
                        JOptionPane.WARNING_MESSAGE, warningIcon
                );
            }
        }

    }//GEN-LAST:event_btnUpdateScheduleActionPerformed

    private void btnRemoveScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveScheduleActionPerformed
        DefaultTableModel flightSchedule = (DefaultTableModel) tblFlightSchedule.getModel();
        if (tblFlightSchedule.getSelectedRowCount() == 1) {
            flightSchedule.removeRow(tblFlightSchedule.getSelectedRow());
            String Type = "remove";
            TypeOfMesseage(Type);
        } else {
            JOptionPane.showMessageDialog(
                    this, "Please select to remove the schedule!", "Warning!",
                    JOptionPane.WARNING_MESSAGE, warningIcon
            );
        }
    }//GEN-LAST:event_btnRemoveScheduleActionPerformed

    // Sets and Gets the AircraftName and Origin
    private void btnOriginActionPerformed(java.awt.event.ActionEvent evt) {
        //An object of class FlightSchedule
        FlightSchedule flightSchedule = new FlightSchedule();

        flightSchedule.setAircraftName(txtAircraftName.getText());
        flightSchedule.setOrigin(txtOrigin.getText());

        if (!isDataEntered()) { // if its empty it returns false, otherwise return true
            JOptionPane.showMessageDialog(
                    this, "All fields required!", "Warning!",
                    JOptionPane.WARNING_MESSAGE, warningIcon
            );
        } else {
            JOptionPane.showMessageDialog(
                    this, "Aircraft Name: " + flightSchedule.getAircraftName() + "\n"
                    + "Origin: " + flightSchedule.getOrigin(),
                    "Flight Schedule Origin: " + flightSchedule.getOrigin(), JOptionPane.INFORMATION_MESSAGE,
                    flightscheduleIcon
            );
        }
    }

    // Sets and Gets the AircraftName, Origin and Destination
    private void btnTravelRouteActionPerformed(java.awt.event.ActionEvent evt) {
        //An object of class FlightSchedule
        FlightSchedule flightSchedule = new FlightSchedule();

        flightSchedule.setAircraftName(txtAircraftName.getText());
        flightSchedule.setOrigin(txtOrigin.getText());
        flightSchedule.setDestination(txtDestination.getText());

        if (!isDataEntered()) { // if its empty it returns false, otherwise return true
            JOptionPane.showMessageDialog(
                    this, "All fields required!", "Warning!",
                    JOptionPane.WARNING_MESSAGE, warningIcon
            );
        } else {
            JOptionPane.showMessageDialog(
                    this, "Aircraft Name: " + flightSchedule.getAircraftName() + "\n"
                    + "Origin: " + flightSchedule.getOrigin() + "\n"
                    + "Destination: " + flightSchedule.getDestination(),
                    "Flight Schedule Route - " + "From: " + flightSchedule.getOrigin()
                    + "  To: " + flightSchedule.getDestination(), JOptionPane.INFORMATION_MESSAGE,
                    flightscheduleIcon
            );
        }
    }

    // Clears the input fields
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {
        String Type = "clear";
        TypeOfMesseage(Type);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestFlightUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestFlightUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestFlightUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestFlightUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestFlightUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnOrigin;
    private javax.swing.JButton btnRemoveSchedule;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnTravelRoute;
    private javax.swing.JButton btnUpdateSchedule;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAircraftName;
    private javax.swing.JLabel lblArrivalTime;
    private javax.swing.JLabel lblDateOfFlight;
    private javax.swing.JLabel lblDepartureTime;
    private javax.swing.JLabel lblDestination;
    private javax.swing.JLabel lblOrigin;
    private javax.swing.JTable tblFlightSchedule;
    public javax.swing.JTextField txtAircraftName;
    private javax.swing.JTextField txtArrivalTime;
    private javax.swing.JTextField txtDateOfFlight;
    private javax.swing.JTextField txtDepartureTime;
    private javax.swing.JTextField txtDestination;
    private javax.swing.JTextField txtOrigin;
    // End of variables declaration//GEN-END:variables
}
